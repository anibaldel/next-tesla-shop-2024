// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id String @id @default(uuid())
  name String @unique

  product Product[]
}

model Product {
  id String @id @default(uuid())
  title String
  description String 
  inStock Int
  price Float @default(0)
  sizes Size[] @default([])
  slug String @unique
  tags String[] @default([])
  gender Gender

  category Category @relation(fields: [categoryId],references: [id])
  categoryId String
  
  productImage ProductImage[]
  orderItem OrderItem[]

  @@index([gender])
}

model ProductImage {
  id Int @id @default(autoincrement())
  url String

  product Product @relation(fields: [productId], references: [id])
  productId String

}

model User {
  id String @id @default(uuid()) 
  name String
  email String @unique
  emailVerified DateTime?
  password String
  role Role @default(user)
  image String?

  address UserAddress?

  // Relaciones
  order Order[]
}

model City {
  id String @id 
  name String
  userAddress UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id String @id @default(uuid())
  firstName String
  lastName String
  address String
  address2 String?
  phone String

  // Relaciones
  city City @relation(fields: [cityId], references: [id])
  cityId String

  user User @relation(fields: [userId], references: [id])
  userId String @unique

}

// Order de compras
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean @default(false)
  paidAt       DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relaciones
  user   User   @relation(fields: [userId], references: [id])
  userId String
  orderItem    OrderItem[]
  orderAddress OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size
  // Relaciones
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  phone      String
  // Relaciones
  city   City @relation(fields: [cityId], references: [id])
  cityId String
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
